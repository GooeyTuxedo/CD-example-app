services:

  haproxy:
    image: haproxy:latest
    container_name: haproxy
    hostname: haproxy
    restart: always
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - certificates:/usr/local/etc/haproxy/certificates:ro
    networks:
      - default
      - hapnet
      - drone
    ports:
      - "80:80"
      - "443:443"
      # - "4001:4001" # ipfs switch
      # - "9097:9097" # ipfs pinning svc
      - "9999"
    environment:
      - DOMAIN_URL

  certbot:
    container_name: certbot
    build: 
      context: ./certbot
    hostname: certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do . /etc/scripts/renew-certificates.sh ; sleep 12h & wait $${!}; done;'"
    restart: always
    volumes:
      - certificates:/etc/certificates
    networks:
      - hapnet
    secrets:
      - digitalocean_token
    environment:
      - DOMAIN_URL
      - ADMIN_EMAIL

  drone-server:
    image: drone/drone:latest
    container_name: drone-server
    hostname: drone
    volumes:
      - drone-data:/data
    restart: always
    environment:
      - DRONE_SERVER_HOST=drone.${DOMAIN_URL}
      - DRONE_SERVER_PROTO=https
      - DRONE_USER_FILTER=${GITHUB_USERNAME}
      - DRONE_TLS_AUTOCERT=false
      - DRONE_GITHUB_SERVER=https://github.com
      - DRONE_GITHUB_CLIENT_ID
      - DRONE_GITHUB_CLIENT_SECRET
      - DRONE_RPC_SECRET
    networks:
      - drone

  drone-runner:
    image: drone/drone-runner-docker:latest
    container_name: drone-runner
    environment:
      - DRONE_RPC_HOST=drone-server
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_SECRET
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - drone

  # redis-server:
  #   image: redis
  #   restart: always

  # postgres:
  #   image: postgres
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_DB=drone
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  nextjs-app:
    build: ./nextjs-docker
    container_name: nextjs-app
    hostname: nextjs
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - hapnet
    environment:
      - NEXT_PUBLIC_DOMAIN_URL={$DOMAIN_URL}
      - NEXT_PUBLIC_VIDEO_HASH={$VIDEO_HASH}

networks:
  hapnet:
    name: hapnet
    driver: bridge
    internal: true
  drone:
    name: drone
    driver: bridge

volumes:
  certificates:
  drone-data:

secrets:
  digitalocean_token:
    file: ./digitalocean.ini